// AifilTests.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

namespace Question1
{
	vector<int> Factorization(int number)
	{
		vector<int> factorization_number;
		for (int multiplier = 2; multiplier <= sqrt(number); multiplier++)
		{
			while (number % multiplier == 0)
			{
				factorization_number.push_back(multiplier);
				number /= multiplier;
			}
		}

		if (number != 1)
			factorization_number.push_back(number);

		return factorization_number;
	}

	vector<vector<int>> FactorizationForNNumber(int n)
	{
		vector<vector<int>> factorization_for_n_number;
		for (int number = 1; number < n+1; number++)
		{
			vector<int> factorization_number = Factorization(number);
			factorization_for_n_number.push_back(factorization_number);
		}

		return factorization_for_n_number;
	}

	void OutputToConsole()
	{
		vector<vector<int>> result;
		char *n = new char[10];
		cin >> n;
		result = FactorizationForNNumber(atoi(n));
		// HACK: Страшные лямбды :(
		std::for_each(
			result.begin(),
			result.end(),
			[](vector<int> multiplieres)
		{
			static int number = 1;
			cout << "For " << number << ": ";
			std::for_each(
				multiplieres.begin(),
				multiplieres.end(),
				[](int multiplier)
				{
					cout << multiplier << " ";
				}
			);
			cout << endl;
			number++;
		}
		);
	}
}

namespace Question2
{	
	template <class T>
	vector<pair<int, int>> SplitVector(vector<T> vector_, int parts_number_)
	{
		vector<pair<int, int>> indexes_splited_vector;
		int length_part = vector_.size() / parts_number_;
		// Общий остаток частей после деления вектора на части
		// (пусть vector_.size() = 8, parts_number_ = 5, тогда
		// total_parts_remainder = 3;
		// left_parts_remainder = 1;
		// right_parts_remainder = 2;
		int total_parts_remainder = vector_.size() - (length_part * parts_number_);		
		int right_remainder = total_parts_remainder / 2;
		int left_remainder = total_parts_remainder - right_remainder;
		
		for (int i = right_remainder; i < vector_.size() - left_remainder; i += length_part)
			indexes_splited_vector.push_back(make_pair(i,i+length_part-1));

		return indexes_splited_vector;
	}

	void OutputToConsole()
	{		
		vector<pair<int, int>> result;
		vector<int> input_vector{1, 2, 3, 4, 5, 6, 7, 8, 9};
		char *n = new char[10];
		cin >> n;
		result = SplitVector(input_vector, atoi(n));
		// HACK: Страшные лямбды :(
		std::for_each(
			result.begin(),
			result.end(),
			[](pair<int, int> pairs)
			{
				cout << pairs.first << " " << pairs.second << endl;;
			
			}
		);
	}
}

namespace Question4
{
	template <class T>
	struct SNodeList {
		T data;
		SNodeList *next;
	};

	template <class T>
	class CList {
	private:
		SNodeList<T> *m_head, *m_tail;
	public:
		CList() :
			m_head(nullptr),
			m_tail(nullptr){}

		void Add(T data_)
		{
			SNodeList<T> *temp_node = new SNodeList<T>();
			temp_node->data = data_;
			temp_node->next = nullptr;
			if (m_head != nullptr)
			{
				m_tail->next = temp_node;
				m_tail = temp_node;
			}
			else
			{
				m_head = m_tail = temp_node;
			}				
		}
		
		void Show()
		{
			SNodeList<T> *temp_node = m_head;
			while (temp_node != nullptr)
			{
				cout << temp_node->data << " ";
				temp_node = temp_node->next;
			}
			cout << endl;
		}

		template <class T>
		SNodeList<T> * FindTail(SNodeList<T> *list_)
		{
			while (list_->next != nullptr)
				list_ = list_->next;

			return list_;
		}

		// Переупаковывает, изменяя вектор
		template <class T>
		void ReepackingChenge()
		{
			SNodeList <T> *clone_vector = m_head;
			while (clone_vector->next->next != nullptr)
			{
				SNodeList <T> *temp = clone_vector->next;
				SNodeList<T> *new_tail = FindTail(clone_vector);
				clone_vector->next = new_tail;
				new_tail->next = temp;
				clone_vector = temp;
			}
		}

	};
	/*
	template <class T>
	SNodeList<T> * CreateList(vector<T> data_)
	{
		SNodeList<T> *list = new SNodeList<T>;
		for_each(
			data_.begin(),
			data_.end(),
			[&list](T data) mutable
			{
				static SNodeList<T> *iterator = list;				
				iterator->data = data;
				iterator->next = new SNodeList<T>();
				iterator = iterator->next;		
				iterator->next = nullptr;
		}
		);

		SNodeList<T> *temp = FindTail(list);

		return list;
	}
	*/
	template <class T>
	void OutputSVector(SNodeList<T> *list_)
	{
		SNodeList<T> *iterator = list_;
		while (iterator->next != nullptr)
		{
			cout << iterator->data << endl;
			iterator = iterator->next;
		}
	}


	// Переупаковывает, создавая новый
	
	template <class T>
	SNodeList<T> * RepackingNew(SNodeList<T> *vector)
	{
		Vector <T> *clone_vector = *vector_;
		while (clone_vector->next != vector_.next || clone_vector != vector_)
		{

		}
	}
	
}

int _tmain(int argc, _TCHAR* argv[])
{
	vector<int> data{ 1, 2, 3, 4, 5 };
	Question4::CList<int> *list = new Question4::CList<int>();
	list->Add(1);
	list->Add(2);
	list->Add(3);
	list->Add(4);
	list->Add(5);
	list->Show();
		
	list->ReepackingChenge<int>();

	return 0;
}

